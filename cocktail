#!/bin/bash

end_with_code() {
  local rc=$1
  if test -z "$rc";
  then
    rc=1
  fi

  cleanup_working_folder
  unlock_project
  verbose "[$FUNCNAME] exiting with RC=[$rc]"
  exit $rc
}

die() {
  echo -e "$@" >&2
  end_with_code 1
}

verbose() {
  if test "$VERBOSE" -ne 0;
  then
    echo "$@"
  fi
}

debug() {
  if test "$DEBUG" -ne 0;
  then
    echo "$@"
  fi
}

init_check() {
  if test -e $LOCK_FILE;
  then
    die "[$FUNCNAME] lock=$LOCK_FILE exists. Wait compilation or erase it"
  fi

  # PANDOC_FILTER_BASE should exists
  if test ! -d "$PANDOC_FILTER_BASE";
  then
    die "[$FUNCNAME]: PANDOC_FILTER_BASE=$PANDOC_FILTER_BASE unavailable"
  fi

  # PANDOC_INCLUDE_BASE should exists
  if test ! -d "$PANDOC_INCLUDE_BASE";
  then
    die "[$FUNCNAME]: PANDOC_INCLUDE_BASE=$PANDOC_INCLUDE_BASE unavailable"
  fi

  # STORE should exists
  if test ! -d "$STORE" -o ! -w "$STORE";
  then
    die "[$FUNCNAME]: STORE=$STORE should be a writable folder"
  fi

  # WORKING_FOLDER should exists
  if test ! -d "$WORKING_FOLDER" -o ! -w "$WORKING_FOLDER";
  then
    die "[$FUNCNAME]: WORKING_FOLDER=$WORKING_FOLDER should be a writable folder"
  fi

  # external tools
  for tool in touch curl pandoc pdflatex
  do
    local tool_location=$(command -v $tool)
    if test "$tool_location";
    then
      verbose "[$FUNCNAME] $tool=$tool_location"
    else
      die "[$FUNCNAME] $tool unavailable"
    fi
  done
}

mirror_pad() {
  debug "[$FUNCNAME] ARGS:$@"
  if test $# -ne 2;
  then
    die 'usage: [$FUNCNAME] url filename'
  fi

  local url=$1
  local filename=$2
  verbose "[$FUNCNAME] url=$url filename=$filename"
  RESPONSE=$(curl --silent --show-error $url --output $filename 2>&1)
  RC=$?
  local errstr="[$FUNCNAME] url=$url filename$filename [RC:$RC] $RESPONSE"
  if test "$RC" -gt 0;
  then
    die "$errstr"
  fi

  verbose "$errstr"
}

pad2json() {
  debug "[$FUNCNAME] ARGS:$@"
  if test $# -ne 2;
  then
    die "usage: [$FUNCNAME] input_file output_file"
  fi

  local input=$1
  local output=$2
  verbose "[$FUNCNAME] input=$input output=$output"

  pandoc \
    -f markdown "$input" \
    -o "$output" -t json --self-contained
}

pad2docx() {
  debug "[$FUNCNAME] PWD:$PWD ARGS:$@"
  if test $# -ne 2;
  then
    die 'usage: [$FUNCNAME] input_file output_file'
  fi

  local input=$1
  local output=$2
  local refdoc="$PANDOC_INCLUDE_BASE/exegetes.docx"
  verbose "[$FUNCNAME] input=$input output=$output"

  if ! test -e "$refdoc";
  then
    die "[$FUNCNAME] refdoc=$refdoc unavailable"
  fi

  pandoc \
    -f markdown "$input" \
    -o "$output" -t docx --self-contained --smart \
    --reference-docx="$refdoc" \
    --filter pandoc-citeproc \
    --filter $PANDOC_FILTER_BASE/docx.zsh \
    --filter $PANDOC_FILTER_BASE/nettoyage.zsh \
    --filter $PANDOC_FILTER_BASE/nettoyage-etendu.zsh
}

pad2html() {
  debug "[$FUNCNAME] ARGS:$@"
  if test $# -ne 2;
  then
    die 'usage: [$FUNCNAME] input_file output_file'
  fi

  local input=$1
  local output=$2
  verbose "[$FUNCNAME] input=$input output=$output"

  pandoc \
    -f markdown "$input" \
    -o "$output" -t html --self-contained --smart \
    --filter pandoc-citeproc \
    --filter $PANDOC_FILTER_BASE/html.zsh \
    --filter $PANDOC_FILTER_BASE/nettoyage.zsh \
    --filter $PANDOC_FILTER_BASE/nettoyage-etendu.zsh
}

pad2markdown() {
  debug "[$FUNCNAME] ARGS:$@"
  if test $# -ne 2;
  then
    die 'usage: [$FUNCNAME] input_file output_file'
  fi

  local input=$1
  local output=$2
  verbose "[$FUNCNAME] input=$input output=$output"

  pandoc \
    -f markdown "$input" \
    -o "$output" -t markdown --wrap=none --self-contained --smart \
    --reference-location=block --reference-links \
    --filter pandoc-citeproc \
    --filter $PANDOC_FILTER_BASE/markdown.zsh \
    --filter $PANDOC_FILTER_BASE/nettoyage.zsh \
    --filter $PANDOC_FILTER_BASE/nettoyage-etendu.zsh
}

pad2tex() {
  debug "[$FUNCNAME] ARGS:$@"
  if test $# -ne 2;
  then
    die 'usage: [$FUNCNAME] input_file output_file'
  fi

  local input=$1
  local output=$2
  verbose "[$FUNCNAME] input=$input output=$output"

  pandoc \
    -f markdown "$input" \
    -o "$output" -t latex --self-contained \
    --template ../../exegetesDoc/pandocincludes/exegetes.latex \
    --filter pandoc-citeproc \
    --filter $PANDOC_FILTER_BASE/latex.zsh \
    --filter $PANDOC_FILTER_BASE/nettoyage.zsh \
    --filter pandoc-latex-environment \
    --filter $PANDOC_FILTER_BASE/paranumero.bash
}

tex2pdf() {
  debug "[$FUNCNAME] ARGS:$@"
  if test $# -ne 2;
  then
    die 'usage: [$FUNCNAME] input_file output_file'
  fi

  local input=$1
  local output=$2
  verbose "[$FUNCNAME] input=$input output=$output"

  pdflatex -interaction=nonstopmode -output-directory="$WORKING_FOLDER" "$input" >/dev/null
  pdflatex -interaction=nonstopmode -output-directory="$WORKING_FOLDER" "$input" >/dev/null
}

lock_project() {
  verbose "[$FUNCNAME] $PROJET locked with $LOCK_FILE"
  touch $LOCK_FILE
}

unlock_project() {
  if test -e "$LOCK_FILE";
  then
    verbose "[$FUNCNAME] lock=$LOCK_FILE exists, delete"
    rm -f "$LOCK_FILE"
    if test ! -e "$LOCK_FILE";
    then
      verbose "[$FUNCNAME] $PROJET unlocked, $LOCK_FILE removed."
    else
      # we can'nt call die inside a function called by die
      verbose "[$FUNCNAME] we can not unlock $PROJET, $LOCK_FILE still on disk."
    fi
  fi
}

cleanup_working_folder() {
  verbose "[$FUNCNAME] WORKING_FOLDER=$WORKING_FOLDER"
  if test -n "$WORKING_FOLDER" -a -d "$WORKING_FOLDER";
  then
    if test "$VERBOSE" -eq 1;
    then
      rm --recursive --verbose "$WORKING_FOLDER"
    else
      rm --recursive "$WORKING_FOLDER"
    fi
    if test ! -d "$WORKING_FOLDER";
    then
      verbose "[$FUNCNAME] $WORKING_FOLDER removed"
    fi
    # rmdir "$WORKING_FOLDER"
  fi
}

usage() {
  
  echo "cocktail -b url_base -d dossier [ -h ] -p projet [ -g url_garde ]
      -b : url du pad principal
      -d : nom du dossier
      -g : url du pad de page de garde (optionnel)
      -h : cette page d'aide
      -p : nom du projet
      -v : force le mode verbeux"
}

publish() {
    for ext in pdf docx html txt
    do
      local from="$WORKING_FOLDER/$PROJET.$ext"
      local to="$STORE/$PROJET.$ext"
      verbose "$from -> $to"
      cp -f "$from" "$to"
    done
}

### MAIN ###
base=$( cd $( dirname "${BASH_SOURCE[0]}" ) && pwd )
if test -r "$base/cocktail.conf";
then
  source "$base/cocktail.conf"
else
  die "cocktail.conf is missing, see config.conf.smp for example"
fi

OPTERR=1
while getopts "b:d:g:p:hv" option;
do
  case $option in
    b)
        URL_BASE=$OPTARG
        verbose "getopts: -$option) URL_BASE=$URL_BASE"
        ;;
    d)
        DOSSIER=$OPTARG
        verbose "getopts: -$option) DOSSIER=$DOSSIER"
        ;;
    g)
        URL_GARDE=$OPTARG
        verbose "getopts: -$option) URL_GARDE=$URL_GARDE"
        ;;
    h)
        usage
        exit
        ;;
    p)
        PROJET=$OPTARG
        verbose "getopts: -$option) PROJET=$PROJET"
        ;;
    v)
        # Override verbose
        VERBOSE=1
        verbose "getopts: -$option) PROJET=$PROJET"
        ;;
  esac
done

shift $(($OPTIND - 1))
verbose "ARGS=$@"

if test -z "$DOSSIER";
then
  die "getopts: -d DOSSIER is mandatory"
fi

verbose "DOSSIER=$DOSSIER"
WORKING_FOLDER="$WORKING_FOLDER/$DOSSIER"
verbose "WORKING_FOLDER=$WORKING_FOLDER"
mkdir -p "$WORKING_FOLDER"
cd "$WORKING_FOLDER" || die "we can't change to \"$WORKING_FOLDER\" folder"

STORE="$STORE/$DOSSIER"

verbose "STORE=$STORE"
mkdir -p "$STORE"
LOCK_FILE="$STORE/$PROJET.lock"
verbose "LOCK_FILE=$LOCK_FILE"

if test -z "$URL_BASE";
then
  die "getopts: -b URL_BASE is mandatory"
fi

init_check
lock_project
mirror_pad "$URL_BASE" "$WORKING_FOLDER/$PROJET.txt"

if test "$URL_GARDE";
then
  mirror_pad "$URL_GARDE" "$WORKING_FOLDER/garde.tex"
fi


# hack specifique Abro Tele2
touch "$WORKING_FOLDER/annexe-tableau.tex"

pad2json "$WORKING_FOLDER/$PROJET.txt" "$WORKING_FOLDER/$PROJET.json"
pad2docx "$WORKING_FOLDER/$PROJET.txt" "$WORKING_FOLDER/$PROJET.docx"
pad2html "$WORKING_FOLDER/$PROJET.txt" "$WORKING_FOLDER/$PROJET.html"
pad2markdown "$WORKING_FOLDER/$PROJET.txt" "$WORKING_FOLDER/$PROJET.markdown.txt"
pad2tex "$WORKING_FOLDER/$PROJET.txt" "$WORKING_FOLDER/$PROJET.tex"
tex2pdf "$WORKING_FOLDER/$PROJET.tex" "$WORKING_FOLDER/$PROJET.pdf"
publish
end_with_code 0

